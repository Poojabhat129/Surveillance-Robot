// Generated by gencpp from file grizzly_msgs/RawStatus.msg
// DO NOT EDIT!


#ifndef GRIZZLY_MSGS_MESSAGE_RAWSTATUS_H
#define GRIZZLY_MSGS_MESSAGE_RAWSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace grizzly_msgs
{
template <class ContainerAllocator>
struct RawStatus_
{
  typedef RawStatus_<ContainerAllocator> Type;

  RawStatus_()
    : header()
    , voltage(0.0)
    , user_current(0.0)
    , body_temp_adc(0.0)
    , fans_on(false)
    , rc_override(0)
    , rc_velocity(0)
    , rc_rotation(0)
    , error(0)  {
    }
  RawStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , voltage(0.0)
    , user_current(0.0)
    , body_temp_adc(0.0)
    , fans_on(false)
    , rc_override(0)
    , rc_velocity(0)
    , rc_rotation(0)
    , error(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _user_current_type;
  _user_current_type user_current;

   typedef float _body_temp_adc_type;
  _body_temp_adc_type body_temp_adc;

   typedef uint8_t _fans_on_type;
  _fans_on_type fans_on;

   typedef int16_t _rc_override_type;
  _rc_override_type rc_override;

   typedef uint16_t _rc_velocity_type;
  _rc_velocity_type rc_velocity;

   typedef uint16_t _rc_rotation_type;
  _rc_rotation_type rc_rotation;

   typedef uint8_t _error_type;
  _error_type error;


    enum { ERROR_COMMAND_TIMEOUT = 1u };
     enum { ERROR_UNDERVOLT = 2u };
     enum { ERROR_ESTOP = 4u };
     enum { ERROR_ESTOP_RESET = 8u };
     enum { ERROR_BRK_DET = 16u };
 

  typedef boost::shared_ptr< ::grizzly_msgs::RawStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grizzly_msgs::RawStatus_<ContainerAllocator> const> ConstPtr;

}; // struct RawStatus_

typedef ::grizzly_msgs::RawStatus_<std::allocator<void> > RawStatus;

typedef boost::shared_ptr< ::grizzly_msgs::RawStatus > RawStatusPtr;
typedef boost::shared_ptr< ::grizzly_msgs::RawStatus const> RawStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grizzly_msgs::RawStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grizzly_msgs::RawStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace grizzly_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'grizzly_msgs': ['/home/manikanta/catkin_ws/src/grizzly/grizzly_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::grizzly_msgs::RawStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grizzly_msgs::RawStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grizzly_msgs::RawStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grizzly_msgs::RawStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grizzly_msgs::RawStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grizzly_msgs::RawStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grizzly_msgs::RawStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f60c3c0abd6518a31d1f3fa02872ac9";
  }

  static const char* value(const ::grizzly_msgs::RawStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f60c3c0abd6518aULL;
  static const uint64_t static_value2 = 0x31d1f3fa02872ac9ULL;
};

template<class ContainerAllocator>
struct DataType< ::grizzly_msgs::RawStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grizzly_msgs/RawStatus";
  }

  static const char* value(const ::grizzly_msgs::RawStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grizzly_msgs::RawStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
float32 voltage       # [V] Main 48V bus voltage\n\
float32 user_current  # [A] Total power draw from regulated rails\n\
float32 body_temp_adc # [C] Temperature adc reading of enclosure\n\
bool fans_on        # TRUE when fans on\n\
\n\
int16 rc_override   # [us] Pulse length of this channel\n\
uint16 rc_velocity  # [us] Pulse length of this channel\n\
uint16 rc_rotation  # [us] Pulse length of this channel\n\
\n\
uint8 error\n\
uint8 ERROR_COMMAND_TIMEOUT=1\n\
uint8 ERROR_UNDERVOLT=2\n\
uint8 ERROR_ESTOP=4\n\
uint8 ERROR_ESTOP_RESET=8\n\
uint8 ERROR_BRK_DET=16\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::grizzly_msgs::RawStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grizzly_msgs::RawStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.voltage);
      stream.next(m.user_current);
      stream.next(m.body_temp_adc);
      stream.next(m.fans_on);
      stream.next(m.rc_override);
      stream.next(m.rc_velocity);
      stream.next(m.rc_rotation);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grizzly_msgs::RawStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grizzly_msgs::RawStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "user_current: ";
    Printer<float>::stream(s, indent + "  ", v.user_current);
    s << indent << "body_temp_adc: ";
    Printer<float>::stream(s, indent + "  ", v.body_temp_adc);
    s << indent << "fans_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fans_on);
    s << indent << "rc_override: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rc_override);
    s << indent << "rc_velocity: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rc_velocity);
    s << indent << "rc_rotation: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rc_rotation);
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRIZZLY_MSGS_MESSAGE_RAWSTATUS_H
