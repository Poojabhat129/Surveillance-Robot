// Generated by gencpp from file grizzly_msgs/Ambience.msg
// DO NOT EDIT!


#ifndef GRIZZLY_MSGS_MESSAGE_AMBIENCE_H
#define GRIZZLY_MSGS_MESSAGE_AMBIENCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace grizzly_msgs
{
template <class ContainerAllocator>
struct Ambience_
{
  typedef Ambience_<ContainerAllocator> Type;

  Ambience_()
    : position_light(0)
    , autopilot_light(0)
    , beacon(0)
    , headlight(0)
    , taillight(0)
    , beep(0)  {
    }
  Ambience_(const ContainerAllocator& _alloc)
    : position_light(0)
    , autopilot_light(0)
    , beacon(0)
    , headlight(0)
    , taillight(0)
    , beep(0)  {
  (void)_alloc;
    }



   typedef uint8_t _position_light_type;
  _position_light_type position_light;

   typedef uint8_t _autopilot_light_type;
  _autopilot_light_type autopilot_light;

   typedef uint8_t _beacon_type;
  _beacon_type beacon;

   typedef uint8_t _headlight_type;
  _headlight_type headlight;

   typedef uint8_t _taillight_type;
  _taillight_type taillight;

   typedef uint8_t _beep_type;
  _beep_type beep;


    enum { PATTERN_ON = 255u };
     enum { PATTERN_FLASH = 15u };
     enum { PATTERN_DFLASH = 9u };
     enum { PATTERN_QUICKFLASH = 1u };
     enum { PATTERN_OFF = 0u };
 

  typedef boost::shared_ptr< ::grizzly_msgs::Ambience_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grizzly_msgs::Ambience_<ContainerAllocator> const> ConstPtr;

}; // struct Ambience_

typedef ::grizzly_msgs::Ambience_<std::allocator<void> > Ambience;

typedef boost::shared_ptr< ::grizzly_msgs::Ambience > AmbiencePtr;
typedef boost::shared_ptr< ::grizzly_msgs::Ambience const> AmbienceConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grizzly_msgs::Ambience_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grizzly_msgs::Ambience_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace grizzly_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'grizzly_msgs': ['/home/manikanta/catkin_ws/src/grizzly/grizzly_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::grizzly_msgs::Ambience_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grizzly_msgs::Ambience_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grizzly_msgs::Ambience_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grizzly_msgs::Ambience_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grizzly_msgs::Ambience_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grizzly_msgs::Ambience_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grizzly_msgs::Ambience_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61f98d62162f451c695060a2c339b6b0";
  }

  static const char* value(const ::grizzly_msgs::Ambience_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61f98d62162f451cULL;
  static const uint64_t static_value2 = 0x695060a2c339b6b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::grizzly_msgs::Ambience_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grizzly_msgs/Ambience";
  }

  static const char* value(const ::grizzly_msgs::Ambience_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grizzly_msgs::Ambience_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 PATTERN_ON=255\n\
uint8 PATTERN_FLASH=15\n\
uint8 PATTERN_DFLASH=9\n\
uint8 PATTERN_QUICKFLASH=1\n\
uint8 PATTERN_OFF=0\n\
\n\
uint8 position_light    # Signal the status of the GPS system\n\
uint8 autopilot_light   # Signal if the system is under automatic or manual control\n\
uint8 beacon     # Overhead beacon flash pattern\n\
uint8 headlight  # Headlight flash pattern\n\
uint8 taillight  # Taillight flash pattern\n\
uint8 beep   # Noisemaker sound pattern\n\
";
  }

  static const char* value(const ::grizzly_msgs::Ambience_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grizzly_msgs::Ambience_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_light);
      stream.next(m.autopilot_light);
      stream.next(m.beacon);
      stream.next(m.headlight);
      stream.next(m.taillight);
      stream.next(m.beep);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Ambience_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grizzly_msgs::Ambience_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grizzly_msgs::Ambience_<ContainerAllocator>& v)
  {
    s << indent << "position_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_light);
    s << indent << "autopilot_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autopilot_light);
    s << indent << "beacon: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.beacon);
    s << indent << "headlight: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.headlight);
    s << indent << "taillight: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.taillight);
    s << indent << "beep: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.beep);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRIZZLY_MSGS_MESSAGE_AMBIENCE_H
